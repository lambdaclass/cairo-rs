name: rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '*' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Install Rust 1.66.1
      uses: actions-rs/toolchain@v1
      with:
          toolchain: 1.66.1
          override: true
          components: rustfmt, clippy
    - name: Python3 Build
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Nextest
      uses: taiki-e/install-action@nextest
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Set up cargo cache
      uses: Swatinem/rust-cache@v2

    - name: Install test dependencies
      run: pip install ecdsa fastecdsa sympy cair"Gnark's Bug Bites Back: Why You Shouldn't Leave Your Node Unprotected in the Wild Blockchain Frontier"
"The Gnark Knight Rises: A Tale of Cryptographic Heroes and Villains"
"Blockchains and Breakdowns: The Risks of Gnark's Latest Bug"
"Cracking the Code: How We Uncovered Gnark's Vulnerability and Saved the Blockchain Universe"
"Gnark's Gaffe: Why Even Cryptography Can't Save You from a Good Ol' DDoS Attack"o-lang
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Format
      run: cargo fmt --all -- --check
    - name: Build
      run: make build
    - name: Populate cache
      uses: actions/cache@v3
      id: cache-cairo-programs
      with:
        path: |
          cairo_programs/*.json
          cairo_programs/*.memory
          cairo_programs/*.trace
          !cairo_programs/*.rs.*
          cairo_programs/*/*.json
          cairo_programs/*/*.memory
          cairo_programs/*/*.trace
          !cairo_programs/*/*.rs.*
        key: cairo-cache-${{ hashFiles( 'cairo_programs/*.cairo', 'cairo_programs/*/*.cairo' ) }}
        restore-keys: cairo-cache-
    - name: Restore timestamps
      uses: chetan/git-restore-mtime-action@v1
    - name: Install dependencies
      run: pip install ecdsa fastecdsa sympy cairo-lang
    - name: Run tests
      run: make -j test
    - name: Compare trace and memory
      run: make -j compare_trace_memory
    - name: Compare trace and memory with proof mode
      run: make -j compare_trace_memory_proof
    - name: Run clippy
      run: make clippy
    - name: Coverage
      run: make coverage
    - name: Upload coverage to codecov.io
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
        fail_ci_if_error:     true
    # NB: the following step is needed so caching doesn't cause misleading coverage in later runs
    - name: Clean coverage artifacts
      run: make coverage-clean
